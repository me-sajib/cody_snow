"use client"

import { useState } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { StarRating } from "@/components/star-rating"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Play, Pause } from 'lucide-react'

interface Song {
  id: string;
  title: string;
  artist: string;
  url: string;
  generator: 'Udio' | 'Suno' | 'Mureka';
  rating: number;
  comments: { id: string; user: string; text: string }[];
}

interface SongItemProps {
  song: Song;
}

export function SongItem({ song }: SongItemProps) {
  const [isPlaying, setIsPlaying] = useState(false)
  const [newComment, setNewComment] = useState('')
  const [localRating, setLocalRating] = useState(song.rating)

  const handlePlayPause = () => {
    setIsPlaying(!isPlaying)
    // Here you would typically implement the actual audio playback logic
  }

  const handleAddComment = () => {
    if (newComment.trim()) {
      song.comments.push({
        id: Date.now().toString(),
        user: 'CurrentUser', // In a real app, you'd get this from authentication
        text: newComment.trim(),
      })
      setNewComment('')
    }
  }

  const handleRating = (rating: number) => {
    setLocalRating(rating)
    // Here you would typically update the rating on the server
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex justify-between items-center">
          <span>{song.title} - {song.artist}</span>
          <Button variant="outline" size="icon" onClick={handlePlayPause}>
            {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
          </Button>
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="flex justify-between items-center mb-4">
          <span className="text-sm text-muted-foreground">Generated by {song.generator}</span>
          <StarRating rating={localRating} onRate={handleRating} />
        </div>
        <ScrollArea className="h-40 mb-4">
          <div className="space-y-2">
            {song.comments.map((comment) => (
              <div key={comment.id} className="bg-muted p-2 rounded">
                <p className="font-semibold">{comment.user}</p>
                <p>{comment.text}</p>
              </div>
            ))}
          </div>
        </ScrollArea>
        <div className="flex space-x-2">
          <Input
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            placeholder="Add a comment..."
          />
          <Button onClick={handleAddComment}>Comment</Button>
        </div>
      </CardContent>
    </Card>
  )
}

